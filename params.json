{"name":"Salesforce Smart Test Utility","tagline":"The Purpose of this repository is to save your huge time  and allow you to replace tens of lines of object creation with a mere handful ones. This is done through Salesforce test data generator that populates the lookup, master-detail relationships and required fields.","body":"### Welcome to Salesforce Smart Test Utility\r\n>The Purpose of this repository is to save your huge time  and allow you to replace tens of lines of object creation with a mere handful ones.\r\nThis is done through Salesforce test data generator that populates the lookup, master-detail relationships and required fields.\r\n\r\n### Why to write smart test methods\r\n>How often have you wasted hours reverse-engineering a new schema just to create data for a unit test?\r\n>And as all good force.com developers know, you should not rely on existing system data for your tests to work with, but inserting records into a foreign org which could have any number of unexpected validation rules and required fields makes for a lot of extra code, or a high risk of test failure. There are many ways to include data for tests, including through static resources, but every method has its own peculiarities. \r\n\r\n\r\n### How the SmartTestUtility Class will be helpful:\r\n\r\n>SmartTestUtility dynamically used to describe metadata for populating all  the required fields with valid data and creating any related objects and provide a recursion limit for lookup to the same object type up to 5 levels\r\n\r\n#####Multiple Method Overloading to provide multiple option to access the SmartTestUtility Class methods\r\n```javascript\r\npublic static sObject createTestRecord(String sObjectType)\r\n    {\r\n        return createTestRecord(sObjectType, true);\r\n    }\r\n    \r\n    public static sObject createTestRecord(Schema.sObjectType sObjectType)\r\n    {\r\n        return createTestRecord(sObjectType, true);\r\n    }\r\n    \r\n    public static sObject createTestRecord(String sObjectType, Boolean doInsert)\r\n    {\r\n        return createTestRecord(sObjectType, doInsert, null);    \r\n    }\r\n    \r\n    public static sObject createTestRecord(Schema.sObjectType sObjectType, Boolean doInsert)\r\n    {\r\n        return createTestRecord(sObjectType, doInsert, null);\r\n    }\r\n    \r\n    public static sObject createTestRecord(String sObjectType, Boolean doInsert, Map<String,Object> recordDefaultValueMap)\r\n    {\r\n        List<sObject> testRecordList = createTestRecordList(sObjectType, 1, doInsert, new List<Map<String,Object>>{ recordDefaultValueMap });\r\n        return testRecordList[0];    \r\n    }\r\n    \r\n    public static sObject createTestRecord(Schema.sObjectType sObjectType, Boolean doInsert, Map<String,Object> recordDefaultValueMap)\r\n    {\r\n        List<sObject> testRecordList = createTestRecordList(String.valueOf(sObjectType), 1, doInsert, new List<Map<String,Object>>{ recordDefaultValueMap });\r\n        return testRecordList[0];\r\n    }    \r\n    \r\n    public static List<sObject> createTestRecordList(String sObjectType, Integer numberOfRecords)\r\n    {\r\n        return createTestRecordList(sObjectType, numberOfRecords, true);\r\n    }\r\n    \r\n    public static List<sObject> createTestRecordList(Schema.sObjectType sObjectType, Integer numberOfRecords)\r\n    {\r\n        return createTestRecordList(String.valueOf(sObjectType), numberOfRecords);\r\n    }\r\n    \r\n    public static List<sObject> createTestRecordList(String sObjectType, Integer numberOfRecords, Boolean doInsert)\r\n    {\r\n        return createTestRecordList(sObjectType, numberOfRecords, doInsert, null);    \r\n    }\r\n    \r\n    public static List<sObject> createTestRecordList(Schema.sObjectType sObjectType, Integer numberOfRecords, Boolean doInsert)\r\n    {\r\n        return createTestRecordList(String.valueOf(sObjectType), numberOfRecords, doInsert);\r\n    }\r\n    public static List<sObject> createTestRecordList(String sObjectType, Integer numberOfRecords, Boolean doInsert, List<Map<String,Object>> recordDefaultValueMap)\r\n    {\r\n        return createTestRecordList(sObjectType, numberOfRecords, doInsert, recordDefaultValueMap, 0);\r\n    }    \r\n    \r\n    public static List<sObject> createTestRecordList(Schema.sObjectType sObjectType, Integer numberOfRecords, Boolean doInsert, List<Map<String,Object>> recordDefaultValueMap)\r\n    {\r\n        return createTestRecordList(String.valueOf(sObjectType), numberOfRecords, doInsert, recordDefaultValueMap, 0);\r\n    }    \r\n    \r\n    public static Map<String, Schema.SObjectField> getFieldMapFor(String sObjectType)\r\n    {\r\n        return fieldMapFor(sObjectType);\r\n    }\r\n    \r\n    public static Map<String, Schema.SObjectField> getFieldMapFor(Schema.sObjectType sObjectType)\r\n    {\r\n        return getFieldMapFor(String.valueOf(sObjectType));\r\n    }   \r\n``` \r\n\r\n####Line Usage\r\n\r\n#####Simple line to create objects:\r\n```javascript\r\nAccount account = (Account)SmartTestUtility.createTestRecord('Account');\r\n                              OR\r\nAccount account = (Account)SmartTestUtility.createTestRecord(Schema.Account.sObjectType);\r\n```\r\n\r\n#####Simple line to create multiple object records (it will help you while bulk testing):\r\n\r\n```javascript\r\nList<Account> accountList = (List<Account>)SmartTestUtility.createTestRecordList(Schema.Account.sObjectType,Integer numberOfRecords);\r\n                              OR\r\nList<Account> accountList = (List<Account>)SmartTestUtility.createTestRecordList(Schema.Account.sObjectType,Integer numberOfRecords);\r\n```\r\n\r\n####Additional Options\r\n\r\n#####To fill all fields for Test Records:\r\n```javascript\r\nSmartTestUtility.FillAllFields = true;\r\n```\r\n#####To get System Administrator Profile\r\n\r\n```javascript\r\nProfile adminProfile = SmartTestUtility.ADMIN_PPROFILE;\r\n```\r\n#####Get Current User Record:\r\n\r\n```javascript\r\nUser currentUser = SmartTestUtility.CURRENT_USER;\r\n```\r\n\r\n#####Get Admin User Record:\r\n\r\n```javascript\r\nUser adminUser = SmartTestUtility.ADMIN_USER;\r\n```\r\n\r\n#####To define default Country and State / CountryCode and StateCode ( CountryState Picklist Enabled Organizations)\r\n```javascript\r\nSmartTestUtility.DefaultCountry = 'India';\r\nSmartTestUtility.DefaultCountryCode = 'IN';\r\nSmartTestUtility.DefaultState = 'Maharashtra';\r\nSmartTestUtility.DefaultStateCode = 'MH';\r\n```\r\n#####To perform Database operation with Assert:\r\n\r\n```javascript\r\n\r\n// For Single Record.\r\nDatabase.SaveResult insertSaveResult = SmartTestUtility.insertWithAssert(sObjectRecord); \r\n\r\nDatabase.SaveResult updateSaveResult = SmartTestUtility.updateWithAssert(sObjectRecord);\r\n\r\nDatabase.Upsertresult upsertResult = SmartTestUtility.upsertWithAssert(sObjectRecord);\r\n\r\nDatabase.DeleteResult deleteResult = SmartTestUtility.deleteWithAssert(sObjectRecord);\r\n\r\n// For List of sObject\r\n\r\nDatabase.SaveResult[] insertSaveResult = SmartTestUtility.insertListWithAssert(sObjectRecord); \r\n\r\nDatabase.SaveResult[] updateSaveResult = SmartTestUtility.updateListWithAssert(sObjectRecord);\r\n\r\nDatabase.DeleteResult[] deleteResult = SmartTestUtility.deleteListWithAssert(sObjectRecord);\r\n```\r\n##### To Get the Fields of Objects\r\n\r\n```javascript\r\nMap<String, Schema.SObjectField> accountFieldMap = SmartTestUtility.getFieldMapFor('Account');\r\n```\r\n\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the [Blog](isalesforcestuff.blogspot.com/2016/02/smart-way-to-write-test-methods.html)\r\n","google":"UA-73005951-1","note":"Don't delete this file! It's used internally to help with page regeneration."}